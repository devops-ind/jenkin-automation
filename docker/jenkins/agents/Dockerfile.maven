# Maven/Java Jenkins Agent
# Optimized for Java/Maven builds with multiple JDK versions

FROM jenkins/inbound-agent:latest

# Switch to root to install packages
USER root

# Install system packages
RUN apt-get update && apt-get install -y \
    build-essential \
    wget \
    curl \
    git \
    unzip \
    zip \
    # Docker for containerized builds
    docker.io \
    # Additional build tools
    python3 \
    python3-pip \
    && rm -rf /var/lib/apt/lists/*

# Install multiple JDK versions using Eclipse Adoptium
RUN mkdir -p /opt/java

# Install OpenJDK 11
RUN wget -O /tmp/openjdk-11.tar.gz https://github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.19%2B7/OpenJDK11U-jdk_x64_linux_hotspot_11.0.19_7.tar.gz \
    && tar -xzf /tmp/openjdk-11.tar.gz -C /opt/java \
    && mv /opt/java/jdk-11.0.19+7 /opt/java/openjdk-11 \
    && rm /tmp/openjdk-11.tar.gz

# Install OpenJDK 17
RUN wget -O /tmp/openjdk-17.tar.gz https://github.com/adoptium/temurin17-binaries/releases/download/jdk-17.0.7%2B7/OpenJDK17U-jdk_x64_linux_hotspot_17.0.7_7.tar.gz \
    && tar -xzf /tmp/openjdk-17.tar.gz -C /opt/java \
    && mv /opt/java/jdk-17.0.7+7 /opt/java/openjdk-17 \
    && rm /tmp/openjdk-17.tar.gz

# Install OpenJDK 21
RUN wget -O /tmp/openjdk-21.tar.gz https://github.com/adoptium/temurin21-binaries/releases/download/jdk-21.0.2%2B13/OpenJDK21U-jdk_x64_linux_hotspot_21.0.2_13.tar.gz \
    && tar -xzf /tmp/openjdk-21.tar.gz -C /opt/java \
    && mv /opt/java/jdk-21.0.2+13 /opt/java/openjdk-21 \
    && rm /tmp/openjdk-21.tar.gz

# Set default Java version (Java 11)
ENV JAVA_HOME=/opt/java/openjdk-11
ENV PATH=$JAVA_HOME/bin:$PATH

# Install Maven multiple versions
RUN mkdir -p /opt/maven

# Install Maven 3.9
RUN wget -O /tmp/maven-3.9.tar.gz https://downloads.apache.org/maven/maven-3/3.9.4/binaries/apache-maven-3.9.4-bin.tar.gz \
    && tar -xzf /tmp/maven-3.9.tar.gz -C /opt/maven \
    && mv /opt/maven/apache-maven-3.9.4 /opt/maven/maven-3.9 \
    && rm /tmp/maven-3.9.tar.gz

# Install Maven 3.8 (for compatibility)
RUN wget -O /tmp/maven-3.8.tar.gz https://downloads.apache.org/maven/maven-3/3.8.8/binaries/apache-maven-3.8.8-bin.tar.gz \
    && tar -xzf /tmp/maven-3.8.tar.gz -C /opt/maven \
    && mv /opt/maven/apache-maven-3.8.8 /opt/maven/maven-3.8 \
    && rm /tmp/maven-3.8.tar.gz

# Set default Maven version
ENV MAVEN_HOME=/opt/maven/maven-3.9
ENV PATH=$MAVEN_HOME/bin:$PATH

# Install Gradle
RUN wget -O /tmp/gradle.zip https://services.gradle.org/distributions/gradle-8.3-bin.zip \
    && unzip /tmp/gradle.zip -d /opt \
    && mv /opt/gradle-8.3 /opt/gradle \
    && rm /tmp/gradle.zip

ENV GRADLE_HOME=/opt/gradle
ENV PATH=$GRADLE_HOME/bin:$PATH

# Install additional tools for Java development
RUN pip3 install --no-cache-dir \
    # For quality analysis
    pylint \
    flake8 \
    # For deployment
    ansible \
    boto3

# Add jenkins user to docker group
RUN usermod -a -G docker jenkins

# Create directories and set permissions
RUN mkdir -p /home/jenkins/.m2 /home/jenkins/.gradle /home/jenkins/agent \
    && chown -R jenkins:jenkins /home/jenkins

# Switch to jenkins user
USER jenkins

# Create Maven settings with common repositories
RUN mkdir -p /home/jenkins/.m2 && cat > /home/jenkins/.m2/settings.xml << 'EOF'
<?xml version="1.0" encoding="UTF-8"?>
<settings xmlns="http://maven.apache.org/SETTINGS/1.0.0"
          xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd">
    
    <localRepository>/home/jenkins/.m2/repository</localRepository>
    
    <mirrors>
        <!-- Maven Central Mirror -->
        <mirror>
            <id>central-mirror</id>
            <name>Maven Central Mirror</name>
            <url>https://repo1.maven.org/maven2</url>
            <mirrorOf>central</mirrorOf>
        </mirror>
    </mirrors>
    
    <profiles>
        <profile>
            <id>default</id>
            <repositories>
                <repository>
                    <id>central</id>
                    <url>https://repo1.maven.org/maven2</url>
                    <releases><enabled>true</enabled></releases>
                    <snapshots><enabled>false</enabled></snapshots>
                </repository>
            </repositories>
            <pluginRepositories>
                <pluginRepository>
                    <id>central</id>
                    <url>https://repo1.maven.org/maven2</url>
                    <releases><enabled>true</enabled></releases>
                    <snapshots><enabled>false</enabled></snapshots>
                </pluginRepository>
            </pluginRepositories>
        </profile>
    </profiles>
    
    <activeProfiles>
        <activeProfile>default</activeProfile>
    </activeProfiles>
</settings>
EOF

# Set up shell environment with Java tools
RUN echo 'alias ll="ls -la"' >> ~/.bashrc \
    && echo 'alias mvn-debug="mvn -X"' >> ~/.bashrc \
    && echo 'alias gradle-debug="gradle --debug"' >> ~/.bashrc \
    && echo 'export JAVA_11_HOME=/opt/java/openjdk-11' >> ~/.bashrc \
    && echo 'export JAVA_17_HOME=/opt/java/openjdk-17' >> ~/.bashrc \
    && echo 'export JAVA_21_HOME=/opt/java/openjdk-21' >> ~/.bashrc \
    && echo 'alias java11="export JAVA_HOME=$JAVA_11_HOME && export PATH=$JAVA_HOME/bin:$PATH && java -version"' >> ~/.bashrc \
    && echo 'alias java17="export JAVA_HOME=$JAVA_17_HOME && export PATH=$JAVA_HOME/bin:$PATH && java -version"' >> ~/.bashrc \
    && echo 'alias java21="export JAVA_HOME=$JAVA_21_HOME && export PATH=$JAVA_HOME/bin:$PATH && java -version"' >> ~/.bashrc

# Set working directory
WORKDIR /home/jenkins/agent

# Environment variables for build optimization
ENV MAVEN_OPTS="-Xmx2g -Xms512m -XX:+UseG1GC"
ENV GRADLE_OPTS="-Xmx2g -Xms512m -XX:+UseG1GC"
ENV DOCKER_HOST=unix:///var/run/docker.sock
ENV JENKINS_AGENT_WORKDIR=/home/jenkins/agent

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD pgrep -f "jenkins-agent" && java -version || exit 1