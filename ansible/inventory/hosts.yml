# This inventory file demonstrates the power of Ansible's variable system
# It allows the same playbooks to target different environments based on configuration

# Define deployment mode - this can be overridden via environment variable
# Usage: DEPLOYMENT_MODE=local ansible-playbook site.yml
# Usage: DEPLOYMENT_MODE=remote ansible-playbook site.yml
deployment_mode: "{{ lookup('env', 'DEPLOYMENT_MODE') | default('local') }}"

# Local development environment - uses Docker containers
local_infrastructure:
  hosts:
    jenkins-master-local:
      # When running locally, we target the Docker daemon directly
      ansible_connection: docker
      ansible_host: jenkins-master
      ansible_user: root
      # These variables tell Ansible this is a container-based deployment
      deployment_type: container
      docker_network: jenkins-network
      
    jenkins-agent-local:
      ansible_connection: docker
      ansible_host: jenkins-agent
      ansible_user: root
      deployment_type: container
      docker_network: jenkins-network
      
    haproxy-local:
      ansible_connection: docker
      ansible_host: haproxy
      ansible_user: root
      deployment_type: container
      docker_network: jenkins-network

# Remote VM environment - single VM running containerized services
remote_infrastructure:
  hosts:
    docker-host-vm:
      # SSH connection to the VM that will host all containers
      ansible_host: "{{ lookup('env', 'DOCKER_HOST_IP') | default('192.168.1.10') }}"
      ansible_user: "{{ lookup('env', 'ANSIBLE_USER') | default('ubuntu') }}"
      ansible_ssh_private_key_file: "{{ lookup('env', 'SSH_KEY_PATH') | default('~/.ssh/id_rsa') }}"
      # This VM will host containers, so deployment_type is still 'container'
      # but deployment_target is 'remote' to distinguish from local development
      deployment_type: container
      deployment_target: remote
      # All services run on this single host
      services:
        - jenkins-master
        - jenkins-agent
        - haproxy

# Dynamic groups that map to either local or remote based on deployment_mode
# This is the key to making your playbooks environment-agnostic
jenkins_masters:
  hosts:
    "jenkins-master-{{ deployment_mode == 'local' and 'local' or 'vm' }}":

jenkins_agents:
  hosts:
    "jenkins-agent-{{ deployment_mode == 'local' and 'local' or 'vm' }}":

load_balancers:
  hosts:
    "haproxy-{{ deployment_mode == 'local' and 'local' or 'vm' }}":

# Logical groupings that your playbooks can reference
# These groups work regardless of the underlying infrastructure
jenkins_infrastructure:
  children:
    jenkins_masters:
    jenkins_agents:

web_tier:
  children:
    load_balancers:

all_services:
  children:
    jenkins_infrastructure:
    web_tier:
  vars:
    # Global variables that apply to all deployments
    jenkins_version: "2.401.3"
    jenkins_admin_user: admin
    jenkins_admin_password: "{{ lookup('env', 'JENKINS_ADMIN_PASSWORD') | default('admin123') }}"
    
    # Network configuration that adapts to deployment type
    jenkins_master_port: 8080
    jenkins_agent_port: 50000
    haproxy_http_port: 80
    haproxy_https_port: 443
    
    # SSL certificate handling
    ssl_cert_path: "/etc/ssl/certs"
    ssl_key_path: "/etc/ssl/private"