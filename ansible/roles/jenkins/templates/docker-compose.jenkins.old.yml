# Docker Compose template for Jenkins infrastructure
# This template works for both local development and remote VM deployment
# Generated by Ansible - DO NOT EDIT MANUALLY

version: '3.8'

services:
  jenkins-master:
    image: jenkins/jenkins:{{ jenkins_version | default('2.401.3') }}
    container_name: jenkins-master
    restart: unless-stopped
    ports:
      - "{{ jenkins_master_port | default('8080') }}:8080"
      - "{{ jenkins_agent_port | default('50000') }}:50000"
    
    environment:
      - JENKINS_ADMIN_ID={{ jenkins_admin_user | default('admin') }}
      - JENKINS_ADMIN_PASSWORD={{ jenkins_admin_password | default('admin123') }}
      - JAVA_OPTS=-Djenkins.install.runSetupWizard=false
      {% if jenkins_jvm_options is defined %}
      - JAVA_OPTS={{ jenkins_jvm_options }}
      {% endif %}
    
    volumes:
      - jenkins_home:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock
      {% if deployment_mode == 'local' %}
      # In local development, mount source code and configuration
      - ./jenkins/plugins.txt:/usr/share/jenkins/ref/plugins.txt:ro
      - ./jenkins/jcasc:/var/jenkins_home/casc_configs:ro
      {% else %}
      # In remote deployment, use generated configurations
      - ./generated/plugins.txt:/usr/share/jenkins/ref/plugins.txt:ro
      - ./generated/jcasc:/var/jenkins_home/casc_configs:ro
      {% endif %}
      {% if jenkins_additional_volumes is defined %}
      {% for volume in jenkins_additional_volumes %}
      - {{ volume }}
      {% endfor %}
      {% endif %}
    
    networks:
      - jenkins-network
    
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.jenkins.rule=Host(`jenkins.{{ domain_name | default('localhost') }}`)"
      - "traefik.http.services.jenkins.loadbalancer.server.port=8080"
    
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/login || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s

  jenkins-agent:
    image: jenkins/inbound-agent:{{ jenkins_agent_version | default('latest') }}
    container_name: jenkins-agent-{{ jenkins_agent_name | default('docker') }}
    restart: unless-stopped
    
    environment:
      - JENKINS_URL=http://jenkins-master:8080
      - JENKINS_AGENT_NAME={{ jenkins_agent_name | default('docker-agent') }}
      - JENKINS_AGENT_WORKDIR=/home/jenkins/agent
      {% if jenkins_agent_secret is defined %}
      - JENKINS_SECRET={{ jenkins_agent_secret }}
      {% endif %}
    
    volumes:
      - jenkins_agent_workspace:/home/jenkins/agent
      - /var/run/docker.sock:/var/run/docker.sock
      {% if jenkins_agent_additional_volumes is defined %}
      {% for volume in jenkins_agent_additional_volumes %}
      - {{ volume }}
      {% endfor %}
      {% endif %}
    
    networks:
      - jenkins-network
    
    depends_on:
      jenkins-master:
        condition: service_healthy
    
    user: "{{ jenkins_agent_user_id | default('1000') }}:{{ jenkins_agent_group_id | default('1000') }}"

  haproxy:
    image: haproxy:{{ haproxy_version | default('2.8') }}
    container_name: haproxy
    restart: unless-stopped
    
    ports:
      - "{{ haproxy_http_port | default('80') }}:80"
      - "{{ haproxy_https_port | default('443') }}:443"
      - "{{ haproxy_stats_port | default('8404') }}:8404"
    
    volumes:
      {% if deployment_mode == 'local' %}
      - ./haproxy/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
      {% else %}
      - ./generated/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro
      {% endif %}
      {% if ssl_certificates_enabled | default(false) %}
      - {{ ssl_cert_path }}:/etc/ssl/certs:ro
      - {{ ssl_key_path }}:/etc/ssl/private:ro
      {% endif %}
    
    networks:
      - jenkins-network
    
    depends_on:
      - jenkins-master
    
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.haproxy-stats.rule=Host(`haproxy.{{ domain_name | default('localhost') }}`)"
      - "traefik.http.services.haproxy-stats.loadbalancer.server.port=8404"
    
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8404/stats || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3

networks:
  jenkins-network:
    driver: bridge
    ipam:
      config:
        - subnet: {{ jenkins_network_subnet | default('172.20.0.0/24') }}

volumes:
  jenkins_home:
    driver: local
    {% if deployment_mode == 'remote' %}
    driver_opts:
      type: none
      o: bind
      device: {{ jenkins_data_dir | default('/opt/jenkins/data') }}
    {% endif %}
  
  jenkins_agent_workspace:
    driver: local
    {% if deployment_mode == 'remote' %}
    driver_opts:
      type: none
      o: bind
      device: {{ jenkins_agent_workspace_dir | default('/opt/jenkins/agent') }}
    {% endif %}

# Optional: Additional services for enhanced functionality
{% if monitoring_enabled | default(false) %}
  prometheus:
    image: prom/prometheus:{{ prometheus_version | default('latest') }}
    container_name: prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    networks:
      - jenkins-network

  grafana:
    image: grafana/grafana:{{ grafana_version | default('latest') }}
    container_name: grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD={{ grafana_admin_password | default('admin') }}
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - jenkins-network
    depends_on:
      - prometheus

volumes:
  grafana_data:
{% endif %}