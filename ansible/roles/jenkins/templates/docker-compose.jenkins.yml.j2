# Jenkins Infrastructure Docker Compose
# Generated by Ansible - deployment_mode: {{ deployment_mode }}

version: '3.8'

services:
  # Jenkins Master/Controller
  jenkins-master:
    build:
      context: ./jenkins/master
      dockerfile: Dockerfile
    container_name: jenkins-master
    hostname: jenkins-master
    restart: unless-stopped
    
    ports:
      - "{{ jenkins_master_port }}:8080"
      - "{{ jenkins_agent_port }}:50000"
    
    environment:
      # Jenkins admin configuration
      - JENKINS_ADMIN_ID={{ jenkins_admin_user }}
      - JENKINS_ADMIN_PASSWORD={{ jenkins_admin_password }}
      
      # JVM settings
      - JAVA_OPTS=-Djenkins.install.runSetupWizard=false 
                  -Xmx{{ jenkins_master_memory }}
                  -Xms{{ jenkins_master_memory_min }}
      
      # Jenkins configuration
      - JENKINS_OPTS=--httpPort=8080
      - JENKINS_SLAVE_AGENT_PORT={{ jenkins_agent_port }}
      - CASC_JENKINS_CONFIG=/var/jenkins_home/casc_configs
      
      # Docker settings for dynamic agents
      - DOCKER_HOST={{ docker_host }}
      
      # Timezone
      - TZ={{ ansible_date_time.tz | default('UTC') }}
    
    volumes:
      # Jenkins data persistence
      - jenkins_home:/var/jenkins_home
      
      # Docker socket for dynamic agent provisioning
      - /var/run/docker.sock:/var/run/docker.sock
      
      # JCasC configuration
      - ./jenkins/master/jcasc:/var/jenkins_home/casc_configs:ro
      
{% if jenkins_ssl_enabled %}
      # SSL certificates
      - ./certificates:/usr/local/share/ca-certificates:ro
{% endif %}
      
      # Backup directory
      - ./backups:/backups
    
    networks:
      - jenkins-network
    
    labels:
      - "jenkins.component=master"
      - "jenkins.role=controller"
      - "jenkins.deployment_mode={{ deployment_mode }}"
    
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/login || exit 1"]
      interval: 60s
      timeout: 10s
      retries: 5
      start_period: 120s
    
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Static DIND Agent for managing dynamic nodes
  jenkins-agent-dind:
    build:
      context: ./jenkins/agents
      dockerfile: Dockerfile.dind
    container_name: jenkins-agent-dind
    hostname: jenkins-agent-dind
    restart: unless-stopped
    privileged: true
    
    environment:
      # Agent connection settings
      - JENKINS_URL=http://jenkins-master:8080
      - JENKINS_AGENT_NAME={{ jenkins_dind_agent.name }}
      - JENKINS_AGENT_WORKDIR={{ jenkins_dind_agent.workspace }}
      - JENKINS_WEB_SOCKET=true
      
      # Docker settings
      - DOCKER_HOST={{ docker_host }}
      - DOCKER_BUILDKIT=1
      - COMPOSE_DOCKER_CLI_BUILD=1
      
      # Agent configuration
      - JENKINS_TUNNEL=jenkins-master:{{ jenkins_agent_port }}
      - JENKINS_PROTOCOLS=JNLP4-connect
      
      # Resource limits
      - JAVA_OPTS=-Xmx1g -Xms512m
      
      # Timezone
      - TZ={{ ansible_date_time.tz | default('UTC') }}
    
    volumes:
      # Docker socket access (privileged for DIND operations)
      - /var/run/docker.sock:/var/run/docker.sock
      
      # Agent workspace
      - jenkins_agent_dind_workspace:/home/jenkins/agent
      
      # Docker data for DIND operations
      - jenkins_docker_data:/var/lib/docker
      
      # Shared workspace for dynamic agents
      - jenkins_shared_workspace:/shared/workspace
      
{% if jenkins_ssl_enabled %}
      # SSL certificates
      - ./certificates:/usr/local/share/ca-certificates:ro
{% endif %}
    
    networks:
      - jenkins-network
    
    depends_on:
      jenkins-master:
        condition: service_healthy
    
    labels:
      - "jenkins.component=agent"
      - "jenkins.agent.type=static"
      - "jenkins.agent.role=dind"
      - "jenkins.deployment_mode={{ deployment_mode }}"
    
    user: "1000:1000"
    
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "2"

networks:
  jenkins-network:
    name: jenkins-network
    driver: bridge
    ipam:
      config:
        - subnet: {{ jenkins_network_subnet }}

volumes:
  # Jenkins master data
  jenkins_home:
    name: jenkins_home
    driver: local
{% if deployment_mode == 'remote' %}
    driver_opts:
      type: none
      o: bind
      device: {{ jenkins_home_dir }}/data/jenkins_home
{% endif %}
  
  # DIND agent workspace
  jenkins_agent_dind_workspace:
    name: jenkins_agent_dind_workspace
    driver: local
{% if deployment_mode == 'remote' %}
    driver_opts:
      type: none
      o: bind
      device: {{ jenkins_home_dir }}/data/dind_workspace
{% endif %}
  
  # Docker data for DIND operations
  jenkins_docker_data:
    name: jenkins_docker_data
    driver: local
{% if deployment_mode == 'remote' %}
    driver_opts:
      type: none
      o: bind
      device: {{ jenkins_home_dir }}/data/docker_data
{% endif %}
  
  # Shared workspace for dynamic agents
  jenkins_shared_workspace:
    name: jenkins_shared_workspace
    driver: local
{% if deployment_mode == 'remote' %}
    driver_opts:
      type: none
      o: bind
      device: {{ jenkins_home_dir }}/data/shared_workspace
{% endif %}
  
  # Shared caches for dynamic agents
  maven-cache:
    name: maven-cache
    driver: local
{% if deployment_mode == 'remote' %}
    driver_opts:
      type: none
      o: bind
      device: {{ jenkins_home_dir }}/data/maven_cache
{% endif %}
  
  pip-cache:
    name: pip-cache
    driver: local
{% if deployment_mode == 'remote' %}
    driver_opts:
      type: none
      o: bind
      device: {{ jenkins_home_dir }}/data/pip_cache
{% endif %}
  
  jenkins-workspace:
    name: jenkins-workspace
    driver: local
{% if deployment_mode == 'remote' %}
    driver_opts:
      type: none
      o: bind
      device: {{ jenkins_home_dir }}/data/jenkins_workspace
{% endif %}