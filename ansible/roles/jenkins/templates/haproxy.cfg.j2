# HAProxy Configuration for Jenkins Infrastructure
# Generated by Ansible - Deployment Mode: {{ deployment_mode }}
# Corporate Domain: {{ jenkins_domain }}

global
    # Security and performance settings
    daemon
    user haproxy
    group haproxy
    
    # Logging configuration
    log stdout local0 info
    
    # SSL/TLS settings for corporate environment
    ssl-default-bind-ciphers ECDHE+AESGCM:ECDHE+CHACHA20:RSA+AESGCM:RSA+AES:!aNULL:!MD5:!DSS
    ssl-default-bind-options ssl-min-ver TLSv1.2 no-sslv3 no-tlsv10 no-tlsv11
    ssl-default-server-ciphers ECDHE+AESGCM:ECDHE+CHACHA20:RSA+AESGCM:RSA+AES:!aNULL:!MD5:!DSS
    ssl-default-server-options ssl-min-ver TLSv1.2 no-sslv3 no-tlsv10 no-tlsv11
    
    # Performance tuning
    tune.ssl.default-dh-param 2048
    maxconn 4096

defaults
    # Operating mode and timeouts
    mode http
    option httplog
    option dontlognull
    option log-health-checks
    
    # Connection timeouts (important for corporate networks)
    timeout connect 5000ms
    timeout client 50000ms
    timeout server 50000ms
    timeout http-request 10s
    timeout http-keep-alive 2s
    timeout check 10s
    
    # Health check settings
    option httpchk GET /login
    http-check expect status 200
    
    # Error handling
    errorfile 400 /etc/haproxy/errors/400.http
    errorfile 403 /etc/haproxy/errors/403.http
    errorfile 408 /etc/haproxy/errors/408.http
    errorfile 500 /etc/haproxy/errors/500.http
    errorfile 502 /etc/haproxy/errors/502.http
    errorfile 503 /etc/haproxy/errors/503.http
    errorfile 504 /etc/haproxy/errors/504.http

# Frontend for HTTP traffic (redirects to HTTPS in production)
frontend jenkins_http
    bind *:80
    
    # Redirect to HTTPS in production, allow HTTP in development
{% if deployment_mode == 'remote' and jenkins_ssl_enabled | default(true) %}
    # Production: Force HTTPS redirect
    redirect scheme https if !{ ssl_fc }
{% else %}
    # Development: Allow HTTP traffic
    # Route based on Host header for future multi-service support
    acl is_jenkins hdr(host) -i {{ jenkins_domain }}
    acl is_jenkins hdr(host) -i jenkins.{{ jenkins_base_domain | default('company.local') }}
    
    use_backend jenkins_backend if is_jenkins
    default_backend jenkins_backend
{% endif %}

{% if deployment_mode == 'remote' and jenkins_ssl_enabled | default(true) %}
# Frontend for HTTPS traffic (production only)
frontend jenkins_https
    bind *:443 ssl crt {{ haproxy_ssl_cert_path }}/{{ jenkins_domain }}.pem{% if haproxy_ssl_dhparam_path is defined %} dhparam {{ haproxy_ssl_dhparam_path }}{% endif %}
    
    # Security headers for corporate compliance
    http-response set-header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"
    http-response set-header X-Frame-Options "SAMEORIGIN"
    http-response set-header X-Content-Type-Options "nosniff"
    http-response set-header X-XSS-Protection "1; mode=block"
    http-response set-header Referrer-Policy "strict-origin-when-cross-origin"
    
    # Remove server identification for security
    http-response del-header Server
    
    # Route traffic based on domain
    acl is_jenkins hdr(host) -i {{ jenkins_domain }}
    acl is_jenkins hdr(host) -i jenkins.{{ jenkins_base_domain | default('company.local') }}
    
    use_backend jenkins_backend if is_jenkins
    default_backend jenkins_backend
{% endif %}

# Backend for Jenkins master instances
backend jenkins_backend
    # Load balancing algorithm (roundrobin for multiple instances)
    balance roundrobin
    
    # Health check configuration
    option httpchk GET /login
    http-check expect status 200
    
    # Jenkins-specific headers
    http-request set-header X-Forwarded-Proto https if { ssl_fc }
    http-request set-header X-Forwarded-Proto http if !{ ssl_fc }
    http-request set-header X-Forwarded-For %[src]
    
    # Session stickiness (important for Jenkins)
    cookie JSESSIONID prefix nocache
    
    # Jenkins master server(s)
{% for server in jenkins_backend_servers %}
    server {{ server.name }} {{ server.address }}:{{ server.port }} check{% if server.backup | default(false) %} backup{% endif %}{% if server.weight is defined %} weight {{ server.weight }}{% endif %} cookie {{ server.name }}
{% endfor %}

# Statistics and monitoring interface
listen stats
    bind *:{{ haproxy_stats_port | default('8404') }}
    stats enable
    stats uri {{ haproxy_stats_uri | default('/stats') }}
    stats realm "HAProxy Statistics - {{ jenkins_domain }}"
{% if haproxy_stats_auth_enabled | default(true) %}
    stats auth {{ haproxy_stats_user | default('admin') }}:{{ haproxy_stats_password | default('admin123') }}
{% endif %}
    stats refresh 30s
    stats show-legends
    stats show-node
    
    # Admin interface (be careful with this in production!)
{% if deployment_mode == 'local' or haproxy_admin_enabled | default(false) %}
    stats admin if TRUE
{% endif %}

# Health check endpoint for external monitoring
frontend health_check
    bind *:{{ haproxy_health_port | default('8405') }}
    monitor-uri /health
    monitor fail if { nbsrv(jenkins_backend) lt 1 }
    
    # Return 200 if at least one Jenkins server is healthy
    http-request return status 200 content-type text/plain string "OK" if { nbsrv(jenkins_backend) ge 1 }
    http-request return status 503 content-type text/plain string "Service Unavailable"